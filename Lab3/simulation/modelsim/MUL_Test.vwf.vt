// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/28/2020 11:08:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    16_Bit_MUL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 16_Bit_MUL_vlg_sample_tst(
	A,
	B,
	CLK,
	RST,
	START,
	sampler_tx
);
input [15:0] A;
input [15:0] B;
input  CLK;
input  RST;
input  START;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or CLK or RST or START)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 16_Bit_MUL_vlg_check_tst (
	ACC,
	MQ,
	sampler_rx
);
input [15:0] ACC;
input [15:0] MQ;
input sampler_rx;

reg [15:0] ACC_expected;
reg [15:0] MQ_expected;

reg [15:0] ACC_prev;
reg [15:0] MQ_prev;

reg [15:0] ACC_expected_prev;
reg [15:0] MQ_expected_prev;

reg [15:0] last_ACC_exp;
reg [15:0] last_MQ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ACC_prev = ACC;
	MQ_prev = MQ;
end

// update expected /o prevs

always @(trigger)
begin
	ACC_expected_prev = ACC_expected;
	MQ_expected_prev = MQ_expected;
end


// expected ACC[ 15 ]
initial
begin
	ACC_expected[15] = 1'bX;
end 
// expected ACC[ 14 ]
initial
begin
	ACC_expected[14] = 1'bX;
end 
// expected ACC[ 13 ]
initial
begin
	ACC_expected[13] = 1'bX;
end 
// expected ACC[ 12 ]
initial
begin
	ACC_expected[12] = 1'bX;
end 
// expected ACC[ 11 ]
initial
begin
	ACC_expected[11] = 1'bX;
end 
// expected ACC[ 10 ]
initial
begin
	ACC_expected[10] = 1'bX;
end 
// expected ACC[ 9 ]
initial
begin
	ACC_expected[9] = 1'bX;
end 
// expected ACC[ 8 ]
initial
begin
	ACC_expected[8] = 1'bX;
end 
// expected ACC[ 7 ]
initial
begin
	ACC_expected[7] = 1'bX;
end 
// expected ACC[ 6 ]
initial
begin
	ACC_expected[6] = 1'bX;
end 
// expected ACC[ 5 ]
initial
begin
	ACC_expected[5] = 1'bX;
end 
// expected ACC[ 4 ]
initial
begin
	ACC_expected[4] = 1'bX;
end 
// expected ACC[ 3 ]
initial
begin
	ACC_expected[3] = 1'bX;
end 
// expected ACC[ 2 ]
initial
begin
	ACC_expected[2] = 1'bX;
end 
// expected ACC[ 1 ]
initial
begin
	ACC_expected[1] = 1'bX;
end 
// expected ACC[ 0 ]
initial
begin
	ACC_expected[0] = 1'bX;
end 
// expected MQ[ 15 ]
initial
begin
	MQ_expected[15] = 1'bX;
end 
// expected MQ[ 14 ]
initial
begin
	MQ_expected[14] = 1'bX;
end 
// expected MQ[ 13 ]
initial
begin
	MQ_expected[13] = 1'bX;
end 
// expected MQ[ 12 ]
initial
begin
	MQ_expected[12] = 1'bX;
end 
// expected MQ[ 11 ]
initial
begin
	MQ_expected[11] = 1'bX;
end 
// expected MQ[ 10 ]
initial
begin
	MQ_expected[10] = 1'bX;
end 
// expected MQ[ 9 ]
initial
begin
	MQ_expected[9] = 1'bX;
end 
// expected MQ[ 8 ]
initial
begin
	MQ_expected[8] = 1'bX;
end 
// expected MQ[ 7 ]
initial
begin
	MQ_expected[7] = 1'bX;
end 
// expected MQ[ 6 ]
initial
begin
	MQ_expected[6] = 1'bX;
end 
// expected MQ[ 5 ]
initial
begin
	MQ_expected[5] = 1'bX;
end 
// expected MQ[ 4 ]
initial
begin
	MQ_expected[4] = 1'bX;
end 
// expected MQ[ 3 ]
initial
begin
	MQ_expected[3] = 1'bX;
end 
// expected MQ[ 2 ]
initial
begin
	MQ_expected[2] = 1'bX;
end 
// expected MQ[ 1 ]
initial
begin
	MQ_expected[1] = 1'bX;
end 
// expected MQ[ 0 ]
initial
begin
	MQ_expected[0] = 1'bX;
end 
// generate trigger
always @(ACC_expected or ACC or MQ_expected or MQ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ACC = %b | expected MQ = %b | ",ACC_expected_prev,MQ_expected_prev);
	$display("| real ACC = %b | real MQ = %b | ",ACC_prev,MQ_prev);
`endif
	if (
		( ACC_expected_prev[0] !== 1'bx ) && ( ACC_prev[0] !== ACC_expected_prev[0] )
		&& ((ACC_expected_prev[0] !== last_ACC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[0] = ACC_expected_prev[0];
	end
	if (
		( ACC_expected_prev[1] !== 1'bx ) && ( ACC_prev[1] !== ACC_expected_prev[1] )
		&& ((ACC_expected_prev[1] !== last_ACC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[1] = ACC_expected_prev[1];
	end
	if (
		( ACC_expected_prev[2] !== 1'bx ) && ( ACC_prev[2] !== ACC_expected_prev[2] )
		&& ((ACC_expected_prev[2] !== last_ACC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[2] = ACC_expected_prev[2];
	end
	if (
		( ACC_expected_prev[3] !== 1'bx ) && ( ACC_prev[3] !== ACC_expected_prev[3] )
		&& ((ACC_expected_prev[3] !== last_ACC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[3] = ACC_expected_prev[3];
	end
	if (
		( ACC_expected_prev[4] !== 1'bx ) && ( ACC_prev[4] !== ACC_expected_prev[4] )
		&& ((ACC_expected_prev[4] !== last_ACC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[4] = ACC_expected_prev[4];
	end
	if (
		( ACC_expected_prev[5] !== 1'bx ) && ( ACC_prev[5] !== ACC_expected_prev[5] )
		&& ((ACC_expected_prev[5] !== last_ACC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[5] = ACC_expected_prev[5];
	end
	if (
		( ACC_expected_prev[6] !== 1'bx ) && ( ACC_prev[6] !== ACC_expected_prev[6] )
		&& ((ACC_expected_prev[6] !== last_ACC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[6] = ACC_expected_prev[6];
	end
	if (
		( ACC_expected_prev[7] !== 1'bx ) && ( ACC_prev[7] !== ACC_expected_prev[7] )
		&& ((ACC_expected_prev[7] !== last_ACC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[7] = ACC_expected_prev[7];
	end
	if (
		( ACC_expected_prev[8] !== 1'bx ) && ( ACC_prev[8] !== ACC_expected_prev[8] )
		&& ((ACC_expected_prev[8] !== last_ACC_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[8] = ACC_expected_prev[8];
	end
	if (
		( ACC_expected_prev[9] !== 1'bx ) && ( ACC_prev[9] !== ACC_expected_prev[9] )
		&& ((ACC_expected_prev[9] !== last_ACC_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[9] = ACC_expected_prev[9];
	end
	if (
		( ACC_expected_prev[10] !== 1'bx ) && ( ACC_prev[10] !== ACC_expected_prev[10] )
		&& ((ACC_expected_prev[10] !== last_ACC_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[10] = ACC_expected_prev[10];
	end
	if (
		( ACC_expected_prev[11] !== 1'bx ) && ( ACC_prev[11] !== ACC_expected_prev[11] )
		&& ((ACC_expected_prev[11] !== last_ACC_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[11] = ACC_expected_prev[11];
	end
	if (
		( ACC_expected_prev[12] !== 1'bx ) && ( ACC_prev[12] !== ACC_expected_prev[12] )
		&& ((ACC_expected_prev[12] !== last_ACC_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[12] = ACC_expected_prev[12];
	end
	if (
		( ACC_expected_prev[13] !== 1'bx ) && ( ACC_prev[13] !== ACC_expected_prev[13] )
		&& ((ACC_expected_prev[13] !== last_ACC_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[13] = ACC_expected_prev[13];
	end
	if (
		( ACC_expected_prev[14] !== 1'bx ) && ( ACC_prev[14] !== ACC_expected_prev[14] )
		&& ((ACC_expected_prev[14] !== last_ACC_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[14] = ACC_expected_prev[14];
	end
	if (
		( ACC_expected_prev[15] !== 1'bx ) && ( ACC_prev[15] !== ACC_expected_prev[15] )
		&& ((ACC_expected_prev[15] !== last_ACC_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACC_expected_prev);
		$display ("     Real value = %b", ACC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACC_exp[15] = ACC_expected_prev[15];
	end
	if (
		( MQ_expected_prev[0] !== 1'bx ) && ( MQ_prev[0] !== MQ_expected_prev[0] )
		&& ((MQ_expected_prev[0] !== last_MQ_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[0] = MQ_expected_prev[0];
	end
	if (
		( MQ_expected_prev[1] !== 1'bx ) && ( MQ_prev[1] !== MQ_expected_prev[1] )
		&& ((MQ_expected_prev[1] !== last_MQ_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[1] = MQ_expected_prev[1];
	end
	if (
		( MQ_expected_prev[2] !== 1'bx ) && ( MQ_prev[2] !== MQ_expected_prev[2] )
		&& ((MQ_expected_prev[2] !== last_MQ_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[2] = MQ_expected_prev[2];
	end
	if (
		( MQ_expected_prev[3] !== 1'bx ) && ( MQ_prev[3] !== MQ_expected_prev[3] )
		&& ((MQ_expected_prev[3] !== last_MQ_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[3] = MQ_expected_prev[3];
	end
	if (
		( MQ_expected_prev[4] !== 1'bx ) && ( MQ_prev[4] !== MQ_expected_prev[4] )
		&& ((MQ_expected_prev[4] !== last_MQ_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[4] = MQ_expected_prev[4];
	end
	if (
		( MQ_expected_prev[5] !== 1'bx ) && ( MQ_prev[5] !== MQ_expected_prev[5] )
		&& ((MQ_expected_prev[5] !== last_MQ_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[5] = MQ_expected_prev[5];
	end
	if (
		( MQ_expected_prev[6] !== 1'bx ) && ( MQ_prev[6] !== MQ_expected_prev[6] )
		&& ((MQ_expected_prev[6] !== last_MQ_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[6] = MQ_expected_prev[6];
	end
	if (
		( MQ_expected_prev[7] !== 1'bx ) && ( MQ_prev[7] !== MQ_expected_prev[7] )
		&& ((MQ_expected_prev[7] !== last_MQ_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[7] = MQ_expected_prev[7];
	end
	if (
		( MQ_expected_prev[8] !== 1'bx ) && ( MQ_prev[8] !== MQ_expected_prev[8] )
		&& ((MQ_expected_prev[8] !== last_MQ_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[8] = MQ_expected_prev[8];
	end
	if (
		( MQ_expected_prev[9] !== 1'bx ) && ( MQ_prev[9] !== MQ_expected_prev[9] )
		&& ((MQ_expected_prev[9] !== last_MQ_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[9] = MQ_expected_prev[9];
	end
	if (
		( MQ_expected_prev[10] !== 1'bx ) && ( MQ_prev[10] !== MQ_expected_prev[10] )
		&& ((MQ_expected_prev[10] !== last_MQ_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[10] = MQ_expected_prev[10];
	end
	if (
		( MQ_expected_prev[11] !== 1'bx ) && ( MQ_prev[11] !== MQ_expected_prev[11] )
		&& ((MQ_expected_prev[11] !== last_MQ_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[11] = MQ_expected_prev[11];
	end
	if (
		( MQ_expected_prev[12] !== 1'bx ) && ( MQ_prev[12] !== MQ_expected_prev[12] )
		&& ((MQ_expected_prev[12] !== last_MQ_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[12] = MQ_expected_prev[12];
	end
	if (
		( MQ_expected_prev[13] !== 1'bx ) && ( MQ_prev[13] !== MQ_expected_prev[13] )
		&& ((MQ_expected_prev[13] !== last_MQ_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[13] = MQ_expected_prev[13];
	end
	if (
		( MQ_expected_prev[14] !== 1'bx ) && ( MQ_prev[14] !== MQ_expected_prev[14] )
		&& ((MQ_expected_prev[14] !== last_MQ_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[14] = MQ_expected_prev[14];
	end
	if (
		( MQ_expected_prev[15] !== 1'bx ) && ( MQ_prev[15] !== MQ_expected_prev[15] )
		&& ((MQ_expected_prev[15] !== last_MQ_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MQ[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MQ_expected_prev);
		$display ("     Real value = %b", MQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MQ_exp[15] = MQ_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 16_Bit_MUL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg CLK;
reg RST;
reg START;
// wires                                               
wire [15:0] ACC;
wire [15:0] MQ;

wire sampler;                             

// assign statements (if any)                          
16_Bit_MUL i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ACC(ACC),
	.B(B),
	.CLK(CLK),
	.MQ(MQ),
	.RST(RST),
	.START(START)
);
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// START
initial
begin
	START = 1'b1;
end 

// RST
initial
begin
	RST = 1'b1;
end 

16_Bit_MUL_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.CLK(CLK),
	.RST(RST),
	.START(START),
	.sampler_tx(sampler)
);

16_Bit_MUL_vlg_check_tst tb_out(
	.ACC(ACC),
	.MQ(MQ),
	.sampler_rx(sampler)
);
endmodule

