// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2020 23:59:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab3_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab3_vlg_check_tst (
	CLK4,
	IROUT,
	R0,
	R1,
	R2,
	sampler_rx
);
input  CLK4;
input [15:0] IROUT;
input [15:0] R0;
input [15:0] R1;
input [15:0] R2;
input sampler_rx;

reg  CLK4_expected;
reg [15:0] IROUT_expected;
reg [15:0] R0_expected;
reg [15:0] R1_expected;
reg [15:0] R2_expected;

reg  CLK4_prev;
reg [15:0] IROUT_prev;
reg [15:0] R0_prev;
reg [15:0] R1_prev;
reg [15:0] R2_prev;

reg  CLK4_expected_prev;
reg [15:0] IROUT_expected_prev;
reg [15:0] R0_expected_prev;
reg [15:0] R1_expected_prev;
reg [15:0] R2_expected_prev;

reg  last_CLK4_exp;
reg [15:0] last_IROUT_exp;
reg [15:0] last_R0_exp;
reg [15:0] last_R1_exp;
reg [15:0] last_R2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLK4_prev = CLK4;
	IROUT_prev = IROUT;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
end

// update expected /o prevs

always @(trigger)
begin
	CLK4_expected_prev = CLK4_expected;
	IROUT_expected_prev = IROUT_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
end



// expected CLK4
initial
begin
	CLK4_expected = 1'bX;
end 
// expected IROUT[ 15 ]
initial
begin
	IROUT_expected[15] = 1'bX;
end 
// expected IROUT[ 14 ]
initial
begin
	IROUT_expected[14] = 1'bX;
end 
// expected IROUT[ 13 ]
initial
begin
	IROUT_expected[13] = 1'bX;
end 
// expected IROUT[ 12 ]
initial
begin
	IROUT_expected[12] = 1'bX;
end 
// expected IROUT[ 11 ]
initial
begin
	IROUT_expected[11] = 1'bX;
end 
// expected IROUT[ 10 ]
initial
begin
	IROUT_expected[10] = 1'bX;
end 
// expected IROUT[ 9 ]
initial
begin
	IROUT_expected[9] = 1'bX;
end 
// expected IROUT[ 8 ]
initial
begin
	IROUT_expected[8] = 1'bX;
end 
// expected IROUT[ 7 ]
initial
begin
	IROUT_expected[7] = 1'bX;
end 
// expected IROUT[ 6 ]
initial
begin
	IROUT_expected[6] = 1'bX;
end 
// expected IROUT[ 5 ]
initial
begin
	IROUT_expected[5] = 1'bX;
end 
// expected IROUT[ 4 ]
initial
begin
	IROUT_expected[4] = 1'bX;
end 
// expected IROUT[ 3 ]
initial
begin
	IROUT_expected[3] = 1'bX;
end 
// expected IROUT[ 2 ]
initial
begin
	IROUT_expected[2] = 1'bX;
end 
// expected IROUT[ 1 ]
initial
begin
	IROUT_expected[1] = 1'bX;
end 
// expected IROUT[ 0 ]
initial
begin
	IROUT_expected[0] = 1'bX;
end 
// expected R0[ 15 ]
initial
begin
	R0_expected[15] = 1'bX;
end 
// expected R0[ 14 ]
initial
begin
	R0_expected[14] = 1'bX;
end 
// expected R0[ 13 ]
initial
begin
	R0_expected[13] = 1'bX;
end 
// expected R0[ 12 ]
initial
begin
	R0_expected[12] = 1'bX;
end 
// expected R0[ 11 ]
initial
begin
	R0_expected[11] = 1'bX;
end 
// expected R0[ 10 ]
initial
begin
	R0_expected[10] = 1'bX;
end 
// expected R0[ 9 ]
initial
begin
	R0_expected[9] = 1'bX;
end 
// expected R0[ 8 ]
initial
begin
	R0_expected[8] = 1'bX;
end 
// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 15 ]
initial
begin
	R1_expected[15] = 1'bX;
end 
// expected R1[ 14 ]
initial
begin
	R1_expected[14] = 1'bX;
end 
// expected R1[ 13 ]
initial
begin
	R1_expected[13] = 1'bX;
end 
// expected R1[ 12 ]
initial
begin
	R1_expected[12] = 1'bX;
end 
// expected R1[ 11 ]
initial
begin
	R1_expected[11] = 1'bX;
end 
// expected R1[ 10 ]
initial
begin
	R1_expected[10] = 1'bX;
end 
// expected R1[ 9 ]
initial
begin
	R1_expected[9] = 1'bX;
end 
// expected R1[ 8 ]
initial
begin
	R1_expected[8] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 15 ]
initial
begin
	R2_expected[15] = 1'bX;
end 
// expected R2[ 14 ]
initial
begin
	R2_expected[14] = 1'bX;
end 
// expected R2[ 13 ]
initial
begin
	R2_expected[13] = 1'bX;
end 
// expected R2[ 12 ]
initial
begin
	R2_expected[12] = 1'bX;
end 
// expected R2[ 11 ]
initial
begin
	R2_expected[11] = 1'bX;
end 
// expected R2[ 10 ]
initial
begin
	R2_expected[10] = 1'bX;
end 
// expected R2[ 9 ]
initial
begin
	R2_expected[9] = 1'bX;
end 
// expected R2[ 8 ]
initial
begin
	R2_expected[8] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// generate trigger
always @(CLK4_expected or CLK4 or IROUT_expected or IROUT or R0_expected or R0 or R1_expected or R1 or R2_expected or R2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLK4 = %b | expected IROUT = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | ",CLK4_expected_prev,IROUT_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev);
	$display("| real CLK4 = %b | real IROUT = %b | real R0 = %b | real R1 = %b | real R2 = %b | ",CLK4_prev,IROUT_prev,R0_prev,R1_prev,R2_prev);
`endif
	if (
		( CLK4_expected_prev !== 1'bx ) && ( CLK4_prev !== CLK4_expected_prev )
		&& ((CLK4_expected_prev !== last_CLK4_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK4_expected_prev);
		$display ("     Real value = %b", CLK4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLK4_exp = CLK4_expected_prev;
	end
	if (
		( IROUT_expected_prev[0] !== 1'bx ) && ( IROUT_prev[0] !== IROUT_expected_prev[0] )
		&& ((IROUT_expected_prev[0] !== last_IROUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[0] = IROUT_expected_prev[0];
	end
	if (
		( IROUT_expected_prev[1] !== 1'bx ) && ( IROUT_prev[1] !== IROUT_expected_prev[1] )
		&& ((IROUT_expected_prev[1] !== last_IROUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[1] = IROUT_expected_prev[1];
	end
	if (
		( IROUT_expected_prev[2] !== 1'bx ) && ( IROUT_prev[2] !== IROUT_expected_prev[2] )
		&& ((IROUT_expected_prev[2] !== last_IROUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[2] = IROUT_expected_prev[2];
	end
	if (
		( IROUT_expected_prev[3] !== 1'bx ) && ( IROUT_prev[3] !== IROUT_expected_prev[3] )
		&& ((IROUT_expected_prev[3] !== last_IROUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[3] = IROUT_expected_prev[3];
	end
	if (
		( IROUT_expected_prev[4] !== 1'bx ) && ( IROUT_prev[4] !== IROUT_expected_prev[4] )
		&& ((IROUT_expected_prev[4] !== last_IROUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[4] = IROUT_expected_prev[4];
	end
	if (
		( IROUT_expected_prev[5] !== 1'bx ) && ( IROUT_prev[5] !== IROUT_expected_prev[5] )
		&& ((IROUT_expected_prev[5] !== last_IROUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[5] = IROUT_expected_prev[5];
	end
	if (
		( IROUT_expected_prev[6] !== 1'bx ) && ( IROUT_prev[6] !== IROUT_expected_prev[6] )
		&& ((IROUT_expected_prev[6] !== last_IROUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[6] = IROUT_expected_prev[6];
	end
	if (
		( IROUT_expected_prev[7] !== 1'bx ) && ( IROUT_prev[7] !== IROUT_expected_prev[7] )
		&& ((IROUT_expected_prev[7] !== last_IROUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[7] = IROUT_expected_prev[7];
	end
	if (
		( IROUT_expected_prev[8] !== 1'bx ) && ( IROUT_prev[8] !== IROUT_expected_prev[8] )
		&& ((IROUT_expected_prev[8] !== last_IROUT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[8] = IROUT_expected_prev[8];
	end
	if (
		( IROUT_expected_prev[9] !== 1'bx ) && ( IROUT_prev[9] !== IROUT_expected_prev[9] )
		&& ((IROUT_expected_prev[9] !== last_IROUT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[9] = IROUT_expected_prev[9];
	end
	if (
		( IROUT_expected_prev[10] !== 1'bx ) && ( IROUT_prev[10] !== IROUT_expected_prev[10] )
		&& ((IROUT_expected_prev[10] !== last_IROUT_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[10] = IROUT_expected_prev[10];
	end
	if (
		( IROUT_expected_prev[11] !== 1'bx ) && ( IROUT_prev[11] !== IROUT_expected_prev[11] )
		&& ((IROUT_expected_prev[11] !== last_IROUT_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[11] = IROUT_expected_prev[11];
	end
	if (
		( IROUT_expected_prev[12] !== 1'bx ) && ( IROUT_prev[12] !== IROUT_expected_prev[12] )
		&& ((IROUT_expected_prev[12] !== last_IROUT_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[12] = IROUT_expected_prev[12];
	end
	if (
		( IROUT_expected_prev[13] !== 1'bx ) && ( IROUT_prev[13] !== IROUT_expected_prev[13] )
		&& ((IROUT_expected_prev[13] !== last_IROUT_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[13] = IROUT_expected_prev[13];
	end
	if (
		( IROUT_expected_prev[14] !== 1'bx ) && ( IROUT_prev[14] !== IROUT_expected_prev[14] )
		&& ((IROUT_expected_prev[14] !== last_IROUT_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[14] = IROUT_expected_prev[14];
	end
	if (
		( IROUT_expected_prev[15] !== 1'bx ) && ( IROUT_prev[15] !== IROUT_expected_prev[15] )
		&& ((IROUT_expected_prev[15] !== last_IROUT_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUT_expected_prev);
		$display ("     Real value = %b", IROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IROUT_exp[15] = IROUT_expected_prev[15];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R0_expected_prev[8] !== 1'bx ) && ( R0_prev[8] !== R0_expected_prev[8] )
		&& ((R0_expected_prev[8] !== last_R0_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[8] = R0_expected_prev[8];
	end
	if (
		( R0_expected_prev[9] !== 1'bx ) && ( R0_prev[9] !== R0_expected_prev[9] )
		&& ((R0_expected_prev[9] !== last_R0_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[9] = R0_expected_prev[9];
	end
	if (
		( R0_expected_prev[10] !== 1'bx ) && ( R0_prev[10] !== R0_expected_prev[10] )
		&& ((R0_expected_prev[10] !== last_R0_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[10] = R0_expected_prev[10];
	end
	if (
		( R0_expected_prev[11] !== 1'bx ) && ( R0_prev[11] !== R0_expected_prev[11] )
		&& ((R0_expected_prev[11] !== last_R0_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[11] = R0_expected_prev[11];
	end
	if (
		( R0_expected_prev[12] !== 1'bx ) && ( R0_prev[12] !== R0_expected_prev[12] )
		&& ((R0_expected_prev[12] !== last_R0_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[12] = R0_expected_prev[12];
	end
	if (
		( R0_expected_prev[13] !== 1'bx ) && ( R0_prev[13] !== R0_expected_prev[13] )
		&& ((R0_expected_prev[13] !== last_R0_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[13] = R0_expected_prev[13];
	end
	if (
		( R0_expected_prev[14] !== 1'bx ) && ( R0_prev[14] !== R0_expected_prev[14] )
		&& ((R0_expected_prev[14] !== last_R0_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[14] = R0_expected_prev[14];
	end
	if (
		( R0_expected_prev[15] !== 1'bx ) && ( R0_prev[15] !== R0_expected_prev[15] )
		&& ((R0_expected_prev[15] !== last_R0_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R0_exp[15] = R0_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R1_expected_prev[8] !== 1'bx ) && ( R1_prev[8] !== R1_expected_prev[8] )
		&& ((R1_expected_prev[8] !== last_R1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[8] = R1_expected_prev[8];
	end
	if (
		( R1_expected_prev[9] !== 1'bx ) && ( R1_prev[9] !== R1_expected_prev[9] )
		&& ((R1_expected_prev[9] !== last_R1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[9] = R1_expected_prev[9];
	end
	if (
		( R1_expected_prev[10] !== 1'bx ) && ( R1_prev[10] !== R1_expected_prev[10] )
		&& ((R1_expected_prev[10] !== last_R1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[10] = R1_expected_prev[10];
	end
	if (
		( R1_expected_prev[11] !== 1'bx ) && ( R1_prev[11] !== R1_expected_prev[11] )
		&& ((R1_expected_prev[11] !== last_R1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[11] = R1_expected_prev[11];
	end
	if (
		( R1_expected_prev[12] !== 1'bx ) && ( R1_prev[12] !== R1_expected_prev[12] )
		&& ((R1_expected_prev[12] !== last_R1_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[12] = R1_expected_prev[12];
	end
	if (
		( R1_expected_prev[13] !== 1'bx ) && ( R1_prev[13] !== R1_expected_prev[13] )
		&& ((R1_expected_prev[13] !== last_R1_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[13] = R1_expected_prev[13];
	end
	if (
		( R1_expected_prev[14] !== 1'bx ) && ( R1_prev[14] !== R1_expected_prev[14] )
		&& ((R1_expected_prev[14] !== last_R1_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[14] = R1_expected_prev[14];
	end
	if (
		( R1_expected_prev[15] !== 1'bx ) && ( R1_prev[15] !== R1_expected_prev[15] )
		&& ((R1_expected_prev[15] !== last_R1_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[15] = R1_expected_prev[15];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R2_expected_prev[8] !== 1'bx ) && ( R2_prev[8] !== R2_expected_prev[8] )
		&& ((R2_expected_prev[8] !== last_R2_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[8] = R2_expected_prev[8];
	end
	if (
		( R2_expected_prev[9] !== 1'bx ) && ( R2_prev[9] !== R2_expected_prev[9] )
		&& ((R2_expected_prev[9] !== last_R2_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[9] = R2_expected_prev[9];
	end
	if (
		( R2_expected_prev[10] !== 1'bx ) && ( R2_prev[10] !== R2_expected_prev[10] )
		&& ((R2_expected_prev[10] !== last_R2_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[10] = R2_expected_prev[10];
	end
	if (
		( R2_expected_prev[11] !== 1'bx ) && ( R2_prev[11] !== R2_expected_prev[11] )
		&& ((R2_expected_prev[11] !== last_R2_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[11] = R2_expected_prev[11];
	end
	if (
		( R2_expected_prev[12] !== 1'bx ) && ( R2_prev[12] !== R2_expected_prev[12] )
		&& ((R2_expected_prev[12] !== last_R2_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[12] = R2_expected_prev[12];
	end
	if (
		( R2_expected_prev[13] !== 1'bx ) && ( R2_prev[13] !== R2_expected_prev[13] )
		&& ((R2_expected_prev[13] !== last_R2_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[13] = R2_expected_prev[13];
	end
	if (
		( R2_expected_prev[14] !== 1'bx ) && ( R2_prev[14] !== R2_expected_prev[14] )
		&& ((R2_expected_prev[14] !== last_R2_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[14] = R2_expected_prev[14];
	end
	if (
		( R2_expected_prev[15] !== 1'bx ) && ( R2_prev[15] !== R2_expected_prev[15] )
		&& ((R2_expected_prev[15] !== last_R2_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[15] = R2_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire CLK4;
wire [15:0] IROUT;
wire [15:0] R0;
wire [15:0] R1;
wire [15:0] R2;

wire sampler;                             

// assign statements (if any)                          
Lab3 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLK4(CLK4),
	.IROUT(IROUT),
	.R0(R0),
	.R1(R1),
	.R2(R2)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

Lab3_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

Lab3_vlg_check_tst tb_out(
	.CLK4(CLK4),
	.IROUT(IROUT),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.sampler_rx(sampler)
);
endmodule

