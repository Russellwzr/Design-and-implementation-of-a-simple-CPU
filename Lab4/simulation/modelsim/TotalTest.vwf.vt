// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2020 22:15:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab3_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab3_vlg_check_tst (
	ALU_OUT,
	C0,
	CLK1,
	CLK2,
	CLK3,
	CLK4,
	M,
	S,
	TESTOUT,
	X,
	Y,
	sampler_rx
);
input [15:0] ALU_OUT;
input  C0;
input  CLK1;
input  CLK2;
input  CLK3;
input  CLK4;
input  M;
input [3:0] S;
input [15:0] TESTOUT;
input [15:0] X;
input [15:0] Y;
input sampler_rx;

reg [15:0] ALU_OUT_expected;
reg  C0_expected;
reg  CLK1_expected;
reg  CLK2_expected;
reg  CLK3_expected;
reg  CLK4_expected;
reg  M_expected;
reg [3:0] S_expected;
reg [15:0] TESTOUT_expected;
reg [15:0] X_expected;
reg [15:0] Y_expected;

reg [15:0] ALU_OUT_prev;
reg  C0_prev;
reg  CLK1_prev;
reg  CLK2_prev;
reg  CLK3_prev;
reg  CLK4_prev;
reg  M_prev;
reg [3:0] S_prev;
reg [15:0] TESTOUT_prev;
reg [15:0] X_prev;
reg [15:0] Y_prev;

reg [15:0] ALU_OUT_expected_prev;
reg  C0_expected_prev;
reg  CLK1_expected_prev;
reg  CLK2_expected_prev;
reg  CLK3_expected_prev;
reg  CLK4_expected_prev;
reg  M_expected_prev;
reg [3:0] S_expected_prev;
reg [15:0] X_expected_prev;
reg [15:0] Y_expected_prev;

reg [15:0] last_ALU_OUT_exp;
reg  last_C0_exp;
reg  last_CLK1_exp;
reg  last_CLK2_exp;
reg  last_CLK3_exp;
reg  last_CLK4_exp;
reg  last_M_exp;
reg [3:0] last_S_exp;
reg [15:0] last_X_exp;
reg [15:0] last_Y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_OUT_prev = ALU_OUT;
	C0_prev = C0;
	CLK1_prev = CLK1;
	CLK2_prev = CLK2;
	CLK3_prev = CLK3;
	CLK4_prev = CLK4;
	M_prev = M;
	S_prev = S;
	TESTOUT_prev = TESTOUT;
	X_prev = X;
	Y_prev = Y;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_OUT_expected_prev = ALU_OUT_expected;
	C0_expected_prev = C0_expected;
	CLK1_expected_prev = CLK1_expected;
	CLK2_expected_prev = CLK2_expected;
	CLK3_expected_prev = CLK3_expected;
	CLK4_expected_prev = CLK4_expected;
	M_expected_prev = M_expected;
	S_expected_prev = S_expected;
	X_expected_prev = X_expected;
	Y_expected_prev = Y_expected;
end



// expected CLK1
initial
begin
	CLK1_expected = 1'bX;
end 

// expected CLK2
initial
begin
	CLK2_expected = 1'bX;
end 

// expected CLK3
initial
begin
	CLK3_expected = 1'bX;
end 

// expected CLK4
initial
begin
	CLK4_expected = 1'bX;
end 

// expected M
initial
begin
	M_expected = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 

// expected C0
initial
begin
	C0_expected = 1'bX;
end 
// expected X[ 15 ]
initial
begin
	X_expected[15] = 1'bX;
	X_expected[15] = #999000 1'b0;
end 
// expected X[ 14 ]
initial
begin
	X_expected[14] = 1'bX;
	X_expected[14] = #999000 1'b0;
end 
// expected X[ 13 ]
initial
begin
	X_expected[13] = 1'bX;
	X_expected[13] = #999000 1'b0;
end 
// expected X[ 12 ]
initial
begin
	X_expected[12] = 1'bX;
	X_expected[12] = #999000 1'b0;
end 
// expected X[ 11 ]
initial
begin
	X_expected[11] = 1'bX;
	X_expected[11] = #999000 1'b0;
end 
// expected X[ 10 ]
initial
begin
	X_expected[10] = 1'bX;
	X_expected[10] = #999000 1'b0;
end 
// expected X[ 9 ]
initial
begin
	X_expected[9] = 1'bX;
	X_expected[9] = #999000 1'b0;
end 
// expected X[ 8 ]
initial
begin
	X_expected[8] = 1'bX;
	X_expected[8] = #999000 1'b0;
end 
// expected X[ 7 ]
initial
begin
	X_expected[7] = 1'bX;
	X_expected[7] = #999000 1'b0;
end 
// expected X[ 6 ]
initial
begin
	X_expected[6] = 1'bX;
	X_expected[6] = #999000 1'b0;
end 
// expected X[ 5 ]
initial
begin
	X_expected[5] = 1'bX;
	X_expected[5] = #999000 1'b0;
end 
// expected X[ 4 ]
initial
begin
	X_expected[4] = 1'bX;
	X_expected[4] = #999000 1'b0;
end 
// expected X[ 3 ]
initial
begin
	X_expected[3] = 1'bX;
	X_expected[3] = #999000 1'b0;
end 
// expected X[ 2 ]
initial
begin
	X_expected[2] = 1'bX;
	X_expected[2] = #999000 1'b0;
end 
// expected X[ 1 ]
initial
begin
	X_expected[1] = 1'bX;
	X_expected[1] = #999000 1'b0;
end 
// expected X[ 0 ]
initial
begin
	X_expected[0] = 1'bX;
	X_expected[0] = #999000 1'b0;
end 
// expected Y[ 15 ]
initial
begin
	Y_expected[15] = 1'bX;
	Y_expected[15] = #999000 1'b0;
end 
// expected Y[ 14 ]
initial
begin
	Y_expected[14] = 1'bX;
	Y_expected[14] = #999000 1'b0;
end 
// expected Y[ 13 ]
initial
begin
	Y_expected[13] = 1'bX;
	Y_expected[13] = #999000 1'b0;
end 
// expected Y[ 12 ]
initial
begin
	Y_expected[12] = 1'bX;
	Y_expected[12] = #999000 1'b0;
end 
// expected Y[ 11 ]
initial
begin
	Y_expected[11] = 1'bX;
	Y_expected[11] = #999000 1'b0;
end 
// expected Y[ 10 ]
initial
begin
	Y_expected[10] = 1'bX;
	Y_expected[10] = #999000 1'b0;
end 
// expected Y[ 9 ]
initial
begin
	Y_expected[9] = 1'bX;
	Y_expected[9] = #999000 1'b0;
end 
// expected Y[ 8 ]
initial
begin
	Y_expected[8] = 1'bX;
	Y_expected[8] = #999000 1'b0;
end 
// expected Y[ 7 ]
initial
begin
	Y_expected[7] = 1'bX;
	Y_expected[7] = #999000 1'b0;
end 
// expected Y[ 6 ]
initial
begin
	Y_expected[6] = 1'bX;
	Y_expected[6] = #999000 1'b0;
end 
// expected Y[ 5 ]
initial
begin
	Y_expected[5] = 1'bX;
	Y_expected[5] = #999000 1'b0;
end 
// expected Y[ 4 ]
initial
begin
	Y_expected[4] = 1'bX;
	Y_expected[4] = #999000 1'b0;
end 
// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
	Y_expected[3] = #999000 1'b0;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
	Y_expected[2] = #999000 1'b0;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
	Y_expected[1] = #999000 1'b0;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
	Y_expected[0] = #999000 1'b0;
end 
// expected ALU_OUT[ 15 ]
initial
begin
	ALU_OUT_expected[15] = 1'bX;
	ALU_OUT_expected[15] = #999000 1'b0;
end 
// expected ALU_OUT[ 14 ]
initial
begin
	ALU_OUT_expected[14] = 1'bX;
	ALU_OUT_expected[14] = #999000 1'b0;
end 
// expected ALU_OUT[ 13 ]
initial
begin
	ALU_OUT_expected[13] = 1'bX;
	ALU_OUT_expected[13] = #999000 1'b0;
end 
// expected ALU_OUT[ 12 ]
initial
begin
	ALU_OUT_expected[12] = 1'bX;
	ALU_OUT_expected[12] = #999000 1'b0;
end 
// expected ALU_OUT[ 11 ]
initial
begin
	ALU_OUT_expected[11] = 1'bX;
	ALU_OUT_expected[11] = #999000 1'b0;
end 
// expected ALU_OUT[ 10 ]
initial
begin
	ALU_OUT_expected[10] = 1'bX;
	ALU_OUT_expected[10] = #999000 1'b0;
end 
// expected ALU_OUT[ 9 ]
initial
begin
	ALU_OUT_expected[9] = 1'bX;
	ALU_OUT_expected[9] = #999000 1'b0;
end 
// expected ALU_OUT[ 8 ]
initial
begin
	ALU_OUT_expected[8] = 1'bX;
	ALU_OUT_expected[8] = #999000 1'b0;
end 
// expected ALU_OUT[ 7 ]
initial
begin
	ALU_OUT_expected[7] = 1'bX;
	ALU_OUT_expected[7] = #999000 1'b0;
end 
// expected ALU_OUT[ 6 ]
initial
begin
	ALU_OUT_expected[6] = 1'bX;
	ALU_OUT_expected[6] = #999000 1'b0;
end 
// expected ALU_OUT[ 5 ]
initial
begin
	ALU_OUT_expected[5] = 1'bX;
	ALU_OUT_expected[5] = #999000 1'b0;
end 
// expected ALU_OUT[ 4 ]
initial
begin
	ALU_OUT_expected[4] = 1'bX;
	ALU_OUT_expected[4] = #999000 1'b0;
end 
// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
	ALU_OUT_expected[3] = #999000 1'b0;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
	ALU_OUT_expected[2] = #999000 1'b0;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
	ALU_OUT_expected[1] = #999000 1'b0;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
	ALU_OUT_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(ALU_OUT_expected or ALU_OUT or C0_expected or C0 or CLK1_expected or CLK1 or CLK2_expected or CLK2 or CLK3_expected or CLK3 or CLK4_expected or CLK4 or M_expected or M or S_expected or S or TESTOUT_expected or TESTOUT or X_expected or X or Y_expected or Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_OUT = %b | expected C0 = %b | expected CLK1 = %b | expected CLK2 = %b | expected CLK3 = %b | expected CLK4 = %b | expected M = %b | expected S = %b | expected TESTOUT = %b | expected X = %b | expected Y = %b | ",ALU_OUT_expected_prev,C0_expected_prev,CLK1_expected_prev,CLK2_expected_prev,CLK3_expected_prev,CLK4_expected_prev,M_expected_prev,S_expected_prev,TESTOUT_expected_prev,X_expected_prev,Y_expected_prev);
	$display("| real ALU_OUT = %b | real C0 = %b | real CLK1 = %b | real CLK2 = %b | real CLK3 = %b | real CLK4 = %b | real M = %b | real S = %b | real TESTOUT = %b | real X = %b | real Y = %b | ",ALU_OUT_prev,C0_prev,CLK1_prev,CLK2_prev,CLK3_prev,CLK4_prev,M_prev,S_prev,TESTOUT_prev,X_prev,Y_prev);
`endif
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[4] !== 1'bx ) && ( ALU_OUT_prev[4] !== ALU_OUT_expected_prev[4] )
		&& ((ALU_OUT_expected_prev[4] !== last_ALU_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[4] = ALU_OUT_expected_prev[4];
	end
	if (
		( ALU_OUT_expected_prev[5] !== 1'bx ) && ( ALU_OUT_prev[5] !== ALU_OUT_expected_prev[5] )
		&& ((ALU_OUT_expected_prev[5] !== last_ALU_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[5] = ALU_OUT_expected_prev[5];
	end
	if (
		( ALU_OUT_expected_prev[6] !== 1'bx ) && ( ALU_OUT_prev[6] !== ALU_OUT_expected_prev[6] )
		&& ((ALU_OUT_expected_prev[6] !== last_ALU_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[6] = ALU_OUT_expected_prev[6];
	end
	if (
		( ALU_OUT_expected_prev[7] !== 1'bx ) && ( ALU_OUT_prev[7] !== ALU_OUT_expected_prev[7] )
		&& ((ALU_OUT_expected_prev[7] !== last_ALU_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[7] = ALU_OUT_expected_prev[7];
	end
	if (
		( ALU_OUT_expected_prev[8] !== 1'bx ) && ( ALU_OUT_prev[8] !== ALU_OUT_expected_prev[8] )
		&& ((ALU_OUT_expected_prev[8] !== last_ALU_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[8] = ALU_OUT_expected_prev[8];
	end
	if (
		( ALU_OUT_expected_prev[9] !== 1'bx ) && ( ALU_OUT_prev[9] !== ALU_OUT_expected_prev[9] )
		&& ((ALU_OUT_expected_prev[9] !== last_ALU_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[9] = ALU_OUT_expected_prev[9];
	end
	if (
		( ALU_OUT_expected_prev[10] !== 1'bx ) && ( ALU_OUT_prev[10] !== ALU_OUT_expected_prev[10] )
		&& ((ALU_OUT_expected_prev[10] !== last_ALU_OUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[10] = ALU_OUT_expected_prev[10];
	end
	if (
		( ALU_OUT_expected_prev[11] !== 1'bx ) && ( ALU_OUT_prev[11] !== ALU_OUT_expected_prev[11] )
		&& ((ALU_OUT_expected_prev[11] !== last_ALU_OUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[11] = ALU_OUT_expected_prev[11];
	end
	if (
		( ALU_OUT_expected_prev[12] !== 1'bx ) && ( ALU_OUT_prev[12] !== ALU_OUT_expected_prev[12] )
		&& ((ALU_OUT_expected_prev[12] !== last_ALU_OUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[12] = ALU_OUT_expected_prev[12];
	end
	if (
		( ALU_OUT_expected_prev[13] !== 1'bx ) && ( ALU_OUT_prev[13] !== ALU_OUT_expected_prev[13] )
		&& ((ALU_OUT_expected_prev[13] !== last_ALU_OUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[13] = ALU_OUT_expected_prev[13];
	end
	if (
		( ALU_OUT_expected_prev[14] !== 1'bx ) && ( ALU_OUT_prev[14] !== ALU_OUT_expected_prev[14] )
		&& ((ALU_OUT_expected_prev[14] !== last_ALU_OUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[14] = ALU_OUT_expected_prev[14];
	end
	if (
		( ALU_OUT_expected_prev[15] !== 1'bx ) && ( ALU_OUT_prev[15] !== ALU_OUT_expected_prev[15] )
		&& ((ALU_OUT_expected_prev[15] !== last_ALU_OUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[15] = ALU_OUT_expected_prev[15];
	end
	if (
		( C0_expected_prev !== 1'bx ) && ( C0_prev !== C0_expected_prev )
		&& ((C0_expected_prev !== last_C0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C0_exp = C0_expected_prev;
	end
	if (
		( CLK1_expected_prev !== 1'bx ) && ( CLK1_prev !== CLK1_expected_prev )
		&& ((CLK1_expected_prev !== last_CLK1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK1_expected_prev);
		$display ("     Real value = %b", CLK1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CLK1_exp = CLK1_expected_prev;
	end
	if (
		( CLK2_expected_prev !== 1'bx ) && ( CLK2_prev !== CLK2_expected_prev )
		&& ((CLK2_expected_prev !== last_CLK2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK2_expected_prev);
		$display ("     Real value = %b", CLK2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CLK2_exp = CLK2_expected_prev;
	end
	if (
		( CLK3_expected_prev !== 1'bx ) && ( CLK3_prev !== CLK3_expected_prev )
		&& ((CLK3_expected_prev !== last_CLK3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK3_expected_prev);
		$display ("     Real value = %b", CLK3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CLK3_exp = CLK3_expected_prev;
	end
	if (
		( CLK4_expected_prev !== 1'bx ) && ( CLK4_prev !== CLK4_expected_prev )
		&& ((CLK4_expected_prev !== last_CLK4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK4_expected_prev);
		$display ("     Real value = %b", CLK4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CLK4_exp = CLK4_expected_prev;
	end
	if (
		( M_expected_prev !== 1'bx ) && ( M_prev !== M_expected_prev )
		&& ((M_expected_prev !== last_M_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_M_exp = M_expected_prev;
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( X_expected_prev[0] !== 1'bx ) && ( X_prev[0] !== X_expected_prev[0] )
		&& ((X_expected_prev[0] !== last_X_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[0] = X_expected_prev[0];
	end
	if (
		( X_expected_prev[1] !== 1'bx ) && ( X_prev[1] !== X_expected_prev[1] )
		&& ((X_expected_prev[1] !== last_X_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[1] = X_expected_prev[1];
	end
	if (
		( X_expected_prev[2] !== 1'bx ) && ( X_prev[2] !== X_expected_prev[2] )
		&& ((X_expected_prev[2] !== last_X_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[2] = X_expected_prev[2];
	end
	if (
		( X_expected_prev[3] !== 1'bx ) && ( X_prev[3] !== X_expected_prev[3] )
		&& ((X_expected_prev[3] !== last_X_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[3] = X_expected_prev[3];
	end
	if (
		( X_expected_prev[4] !== 1'bx ) && ( X_prev[4] !== X_expected_prev[4] )
		&& ((X_expected_prev[4] !== last_X_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[4] = X_expected_prev[4];
	end
	if (
		( X_expected_prev[5] !== 1'bx ) && ( X_prev[5] !== X_expected_prev[5] )
		&& ((X_expected_prev[5] !== last_X_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[5] = X_expected_prev[5];
	end
	if (
		( X_expected_prev[6] !== 1'bx ) && ( X_prev[6] !== X_expected_prev[6] )
		&& ((X_expected_prev[6] !== last_X_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[6] = X_expected_prev[6];
	end
	if (
		( X_expected_prev[7] !== 1'bx ) && ( X_prev[7] !== X_expected_prev[7] )
		&& ((X_expected_prev[7] !== last_X_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[7] = X_expected_prev[7];
	end
	if (
		( X_expected_prev[8] !== 1'bx ) && ( X_prev[8] !== X_expected_prev[8] )
		&& ((X_expected_prev[8] !== last_X_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[8] = X_expected_prev[8];
	end
	if (
		( X_expected_prev[9] !== 1'bx ) && ( X_prev[9] !== X_expected_prev[9] )
		&& ((X_expected_prev[9] !== last_X_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[9] = X_expected_prev[9];
	end
	if (
		( X_expected_prev[10] !== 1'bx ) && ( X_prev[10] !== X_expected_prev[10] )
		&& ((X_expected_prev[10] !== last_X_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[10] = X_expected_prev[10];
	end
	if (
		( X_expected_prev[11] !== 1'bx ) && ( X_prev[11] !== X_expected_prev[11] )
		&& ((X_expected_prev[11] !== last_X_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[11] = X_expected_prev[11];
	end
	if (
		( X_expected_prev[12] !== 1'bx ) && ( X_prev[12] !== X_expected_prev[12] )
		&& ((X_expected_prev[12] !== last_X_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[12] = X_expected_prev[12];
	end
	if (
		( X_expected_prev[13] !== 1'bx ) && ( X_prev[13] !== X_expected_prev[13] )
		&& ((X_expected_prev[13] !== last_X_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[13] = X_expected_prev[13];
	end
	if (
		( X_expected_prev[14] !== 1'bx ) && ( X_prev[14] !== X_expected_prev[14] )
		&& ((X_expected_prev[14] !== last_X_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[14] = X_expected_prev[14];
	end
	if (
		( X_expected_prev[15] !== 1'bx ) && ( X_prev[15] !== X_expected_prev[15] )
		&& ((X_expected_prev[15] !== last_X_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_X_exp[15] = X_expected_prev[15];
	end
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end
	if (
		( Y_expected_prev[4] !== 1'bx ) && ( Y_prev[4] !== Y_expected_prev[4] )
		&& ((Y_expected_prev[4] !== last_Y_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[4] = Y_expected_prev[4];
	end
	if (
		( Y_expected_prev[5] !== 1'bx ) && ( Y_prev[5] !== Y_expected_prev[5] )
		&& ((Y_expected_prev[5] !== last_Y_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[5] = Y_expected_prev[5];
	end
	if (
		( Y_expected_prev[6] !== 1'bx ) && ( Y_prev[6] !== Y_expected_prev[6] )
		&& ((Y_expected_prev[6] !== last_Y_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[6] = Y_expected_prev[6];
	end
	if (
		( Y_expected_prev[7] !== 1'bx ) && ( Y_prev[7] !== Y_expected_prev[7] )
		&& ((Y_expected_prev[7] !== last_Y_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[7] = Y_expected_prev[7];
	end
	if (
		( Y_expected_prev[8] !== 1'bx ) && ( Y_prev[8] !== Y_expected_prev[8] )
		&& ((Y_expected_prev[8] !== last_Y_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[8] = Y_expected_prev[8];
	end
	if (
		( Y_expected_prev[9] !== 1'bx ) && ( Y_prev[9] !== Y_expected_prev[9] )
		&& ((Y_expected_prev[9] !== last_Y_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[9] = Y_expected_prev[9];
	end
	if (
		( Y_expected_prev[10] !== 1'bx ) && ( Y_prev[10] !== Y_expected_prev[10] )
		&& ((Y_expected_prev[10] !== last_Y_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[10] = Y_expected_prev[10];
	end
	if (
		( Y_expected_prev[11] !== 1'bx ) && ( Y_prev[11] !== Y_expected_prev[11] )
		&& ((Y_expected_prev[11] !== last_Y_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[11] = Y_expected_prev[11];
	end
	if (
		( Y_expected_prev[12] !== 1'bx ) && ( Y_prev[12] !== Y_expected_prev[12] )
		&& ((Y_expected_prev[12] !== last_Y_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[12] = Y_expected_prev[12];
	end
	if (
		( Y_expected_prev[13] !== 1'bx ) && ( Y_prev[13] !== Y_expected_prev[13] )
		&& ((Y_expected_prev[13] !== last_Y_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[13] = Y_expected_prev[13];
	end
	if (
		( Y_expected_prev[14] !== 1'bx ) && ( Y_prev[14] !== Y_expected_prev[14] )
		&& ((Y_expected_prev[14] !== last_Y_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[14] = Y_expected_prev[14];
	end
	if (
		( Y_expected_prev[15] !== 1'bx ) && ( Y_prev[15] !== Y_expected_prev[15] )
		&& ((Y_expected_prev[15] !== last_Y_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y_exp[15] = Y_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire [15:0] ALU_OUT;
wire C0;
wire CLK1;
wire CLK2;
wire CLK3;
wire CLK4;
wire M;
wire [3:0] S;
wire [15:0] TESTOUT;
wire [15:0] X;
wire [15:0] Y;

wire sampler;                             

// assign statements (if any)                          
Lab3 i1 (
// port map - connection between master ports and signals/registers   
	.ALU_OUT(ALU_OUT),
	.C0(C0),
	.CLK(CLK),
	.CLK1(CLK1),
	.CLK2(CLK2),
	.CLK3(CLK3),
	.CLK4(CLK4),
	.M(M),
	.S(S),
	.TESTOUT(TESTOUT),
	.X(X),
	.Y(Y)
);

// CLK
initial
begin
	CLK = 1'b0;
end 

Lab3_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

Lab3_vlg_check_tst tb_out(
	.ALU_OUT(ALU_OUT),
	.C0(C0),
	.CLK1(CLK1),
	.CLK2(CLK2),
	.CLK3(CLK3),
	.CLK4(CLK4),
	.M(M),
	.S(S),
	.TESTOUT(TESTOUT),
	.X(X),
	.Y(Y),
	.sampler_rx(sampler)
);
endmodule

